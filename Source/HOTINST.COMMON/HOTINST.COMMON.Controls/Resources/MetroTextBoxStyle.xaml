<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:option="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:controls="clr-namespace:HOTINST.COMMON.Controls.Controls"
                    xmlns:helper="clr-namespace:HOTINST.COMMON.Controls.Helper">
	<ControlTemplate x:Key="ValidationErrorTemplate">
		<AdornedElementPlaceholder x:Name="placeholder">
			<Grid SnapsToDevicePixels="True">
				<Rectangle x:Name="PopupTargetElement"
                           Margin="-5 0 -5 0"
                           StrokeThickness="0"
                           DataContext="{Binding ElementName=placeholder}" />
				<Border x:Name="ValidationErrorElement"
                        BorderBrush="#FFDB000C"
                        BorderThickness="1"
                        DataContext="{Binding ElementName=placeholder}">

					<Grid Width="12"
                          Height="12"
                          Margin="1 -4 -4 0"
                          HorizontalAlignment="Right"
                          VerticalAlignment="Top"
                          Background="Transparent">
						<Path Margin="1 3 0 0"
                              Fill="#FFDC000C"
                              Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" />
						<Path Margin="1 3 0 0"
                              Fill="White"
                              Data="M 0,0 L2,0 L 8,6 L8,8" />
					</Grid>
				</Border>

				<controls:ValidationPopup x:Name="ValidationPopup" AllowsTransparency="True" IsOpen="False" Placement="Right"
					   PlacementTarget="{Binding ElementName=PopupTargetElement, Mode=OneWay}" StaysOpen="True">
					<Grid x:Name="Root" Margin="4">
						<Grid.Resources>
							<Style TargetType="Border">
								<Style.Triggers>
									<DataTrigger Binding="{Binding ElementName=Root, Path=IsMouseOver, Mode=OneWay}" Value="True">
										<DataTrigger.EnterActions>
											<BeginStoryboard>
												<Storyboard>
													<DoubleAnimation Duration="0:0:0.1"
                                                                     Storyboard.TargetProperty="Opacity"
                                                                     To="0.15" />
												</Storyboard>
											</BeginStoryboard>
										</DataTrigger.EnterActions>
										<DataTrigger.ExitActions>
											<BeginStoryboard>
												<Storyboard>
													<DoubleAnimation Duration="0:0:0.1"
                                                                     Storyboard.TargetProperty="Opacity"
                                                                     To="1" />
												</Storyboard>
											</BeginStoryboard>
										</DataTrigger.ExitActions>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Grid.Resources>
						<Border Margin="4 4 -4 -4"
                                Background="#052A2E31"
                                CornerRadius="5" />
						<Border Margin="3 3 -3 -3"
                                Background="#152A2E31"
                                CornerRadius="4" />
						<Border Margin="2 2 -2 -2"
                                Background="#252A2E31"
                                CornerRadius="3" />
						<Border Margin="1 1 -1 -1"
                                Background="#352A2E31"
                                CornerRadius="2" />
						<Border Background="#7EDC000C" CornerRadius="2">
							<!--
                                from Josh Smith

                                Binding to (Validation.Errors)[0] without Creating Debug Spew

                                http://joshsmithonwpf.wordpress.com/2008/10/08/binding-to-validationerrors0-without-creating-debug-spew/

                                The trick is to bind a ContentPresenter’s Content to the CurrentItem of Validation.Errors for the target element.
                                Binding to the CurrentItem means that we’re  binding to the CurrentItem property of the default ICollectionView
                                that wraps the ReadOnlyObservableCollection<ValidationError> returned by the attached Errors property.
                                When the current item is non-null, that means there is a validation error; when it is null, there are no validation errors.
                                We can rely on ICollectionView to safely access the validation error, or not return anything if there are no errors.
                                That is what prevents the debug spew from pouring out.

                                The DataTemplate declared in the StackPanel’s Resources knows how to render a ValidationError object.
                                If the ContentPresenter has a null value, the template is not used to render anything.

                                Issue #707
                            -->
							<Border.Resources>
								<DataTemplate DataType="{x:Type ValidationError}">
									<TextBlock MaxWidth="250"
                                               Margin="8 4 8 4"
                                               Foreground="White"
                                               Text="{Binding ErrorContent}"
                                               TextWrapping="Wrap"
                                               UseLayoutRounding="False" />
								</DataTemplate>
							</Border.Resources>
							<ItemsControl ItemsSource="{Binding }" />
						</Border>
					</Grid>
				</controls:ValidationPopup>
			</Grid>
		</AdornedElementPlaceholder>

		<ControlTemplate.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" Value="True" />
					<Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

	<ExponentialEase x:Key="ExpoEaseIn"
                     EasingMode="EaseIn"
                     Exponent="2" />
	<ExponentialEase x:Key="ExpoEaseOut"
                     EasingMode="EaseOut"
                     Exponent="2" />
	<ExponentialEase x:Key="ExpoEaseInOut"
                     EasingMode="EaseInOut"
                     Exponent="2" />

	<DropShadowEffect x:Key="WaitingForDataEffect"
                      Opacity="0"
                      BlurRadius="10"
                      ShadowDepth="0"
                      Color="Black" />

	<Storyboard x:Key="WaitingForDataStoryboard" option:Freeze="True">
		<DoubleAnimation AutoReverse="True"
                         Duration="00:00:02"
                         From="0"
                         RepeatBehavior="Forever"
                         Storyboard.TargetName="PART_WaitingForDataEffectGrid"
                         Storyboard.TargetProperty="(Effect).Opacity"
                         Timeline.DesiredFrameRate="30"
                         To="1" />
	</Storyboard>

	<Storyboard x:Key="HideFloatingMessageStoryboard">
		<DoubleAnimation Duration="0:0:.2"
                         From="15"
                         EasingFunction="{StaticResource ExpoEaseInOut}"
                         Storyboard.TargetName="PART_FloatingMessageContainer"
                         Storyboard.TargetProperty="MaxHeight"
                         To="0" />
		<DoubleAnimation Duration="0:0:.2"
                         Storyboard.TargetName="PART_FloatingMessageContainer"
                         Storyboard.TargetProperty="Opacity"
                         To="0" />
		<DoubleAnimation Duration="0:0:.2"
                         EasingFunction="{StaticResource ExpoEaseIn}"
                         Storyboard.TargetName="PART_FloatingMessage"
                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                         To="20" />
	</Storyboard>

	<Storyboard x:Key="ShowFloatingMessageStoryboard">
		<DoubleAnimation Duration="0:0:.2"
                         From="0"
                         EasingFunction="{StaticResource ExpoEaseInOut}"
                         Storyboard.TargetName="PART_FloatingMessageContainer"
                         Storyboard.TargetProperty="MaxHeight"
                         To="15" />
		<DoubleAnimation Duration="0:0:.2"
                         Storyboard.TargetName="PART_FloatingMessageContainer"
                         Storyboard.TargetProperty="Opacity" />
		<DoubleAnimation Duration="0:0:.2"
                         EasingFunction="{StaticResource ExpoEaseOut}"
                         Storyboard.TargetName="PART_FloatingMessage"
                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                         To="0" />
	</Storyboard>

	<Style x:Key="FloatingMessageContainerStyle" TargetType="{x:Type ContentControl}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="IsHitTestVisible" Value="False" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Margin" Value="5 0" />
		<Setter Property="MaxHeight" Value="0" />
		<Setter Property="Visibility" Value="Visible" />
	</Style>

	<Style x:Key="MetroAutoCollapsingTextBlock"
           TargetType="{x:Type TextBlock}">
		<Setter Property="FontSize" Value="10" />
		<Setter Property="Opacity" Value="0.6" />
		<Setter Property="RenderTransform">
			<Setter.Value>
				<TranslateTransform />
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Text" Value="">
				<Setter Property="Visibility" Value="Collapsed" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<ControlTemplate x:Key="ChromelessButtonTemplate" TargetType="{x:Type ButtonBase}">
		<Grid Background="{TemplateBinding Background}">
			<ContentPresenter x:Name="PART_ContentPresenter"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Opacity="0.75"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="PART_ContentPresenter" Property="Opacity" Value="1" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="False">
				<Setter TargetName="PART_ContentPresenter" Property="Opacity" Value=".5" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="#ADADAD" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="ChromelessButtonStyle" TargetType="{x:Type ButtonBase}">
		<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Background" Value="#00FFFFFF" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template" Value="{StaticResource ChromelessButtonTemplate}" />
	</Style>

	<Style x:Key="MetroTextBoxStyle" TargetType="{x:Type TextBox}">
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderBrush" Value="#FFCCCCCC" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CaretBrush" Value="Black" />
		<Setter Property="SelectionBrush" Value="#FF086F9E" />
		<Setter Property="helper:TextBoxHelper.ButtonWidth" Value="22" />
		<Setter Property="helper:TextBoxHelper.ButtonFontSize" Value="16" />
		<Setter Property="helper:ControlsHelper.FocusBorderBrush" Value="DodgerBlue" />
		<Setter Property="helper:ControlsHelper.MouseOverBorderBrush" Value="#52A4F3" />
		<Setter Property="helper:TextBoxHelper.IsMonitoring" Value="True" />
		<Setter Property="Padding" Value="0" />
		<!--  change SnapsToDevicePixels to True to view a better border and validation error  -->
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationErrorTemplate}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="enterGotFocus">
							<DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_Message"
                                             Storyboard.TargetProperty="Opacity"
                                             To=".2" />
						</Storyboard>
						<Storyboard x:Key="exitGotFocus">
							<DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_Message"
                                             Storyboard.TargetProperty="Opacity" />
						</Storyboard>

						<Storyboard x:Key="enterHasText">
							<DoubleAnimation Duration="0:0:0.2"
                                             From=".2"
                                             Storyboard.TargetName="PART_Message"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0" />
						</Storyboard>
						<Storyboard x:Key="exitHasText">
							<DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_Message"
                                             Storyboard.TargetProperty="Opacity" />
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<AdornerDecorator x:Name="PART_WaitingForDataEffectAdornerDecorator" Visibility="Collapsed">
							<AdornerDecorator.CacheMode>
								<BitmapCache EnableClearType="True"
                                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</AdornerDecorator.CacheMode>
							<Border x:Name="PART_WaitingForDataEffectGrid"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="Transparent"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</AdornerDecorator>
						<Border x:Name="Base"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<Grid x:Name="PART_InnerGrid" Margin="2">
							<Grid.ColumnDefinitions>
								<ColumnDefinition x:Name="TextColumn" Width="*" />
								<ColumnDefinition x:Name="ButtonColumn" Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition x:Name="ButtonRow" Height="*" />
							</Grid.RowDefinitions>

							<ScrollViewer x:Name="PART_ContentHost"
                                          Grid.Row="1"
                                          Grid.Column="0"
                                          Margin="2"
                                          VerticalAlignment="Stretch"
                                          Background="{x:Null}"
                                          BorderThickness="0"
                                          IsTabStop="False" />
							<TextBlock x:Name="PART_Message"
                                       Grid.Row="1"
                                       Grid.Column="0"
                                       Margin="6 2 6 2"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Foreground="{TemplateBinding helper:TextBoxHelper.WarterMarkForground}"
                                       Opacity="0.6"
                                       IsHitTestVisible="False"
                                       Text="{TemplateBinding helper:TextBoxHelper.Watermark}"
                                       Visibility="Collapsed" />
							<ContentControl x:Name="PART_FloatingMessageContainer"
                                            Grid.Column="0"
                                            Grid.Row="0"
                                            Grid.ColumnSpan="2"
                                            Style="{StaticResource FloatingMessageContainerStyle}">
								<TextBlock x:Name="PART_FloatingMessage"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Style="{StaticResource MetroAutoCollapsingTextBlock}"
                                           Foreground="{TemplateBinding Foreground}"
                                           Text="{TemplateBinding helper:TextBoxHelper.Watermark}" />
							</ContentControl>
							<Button x:Name="PART_ClearText"
                                    Grid.Row="0"
                                    Grid.RowSpan="2"
                                    Grid.Column="1"
                                    Width="{TemplateBinding helper:TextBoxHelper.ButtonWidth}"
                                    Style="{StaticResource ChromelessButtonStyle}"
                                    Foreground="{TemplateBinding Foreground}"
                                    FontFamily="{TemplateBinding helper:TextBoxHelper.ButtonFontFamily}"
                                    FontSize="{TemplateBinding helper:TextBoxHelper.ButtonFontSize}"
                                    helper:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helper:TextBoxHelper.ClearTextButton), Mode=OneWay}"
                                    Content="{TemplateBinding helper:TextBoxHelper.ButtonContent}"
                                    Template="{TemplateBinding helper:TextBoxHelper.ButtonTemplate}"
                                    ContentTemplate="{TemplateBinding helper:TextBoxHelper.ButtonContentTemplate}"
                                    IsTabStop="False"
                                    Focusable="False"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helper:TextBoxHelper.ClearTextButton), Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
						</Grid>
						<Border x:Name="DisabledVisualElement"
                                Background="#A5FFFFFF"
                                BorderBrush="#A5FFFFFF"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="0"
                                IsHitTestVisible="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helper:ControlsHelper.DisabledVisualElementVisibility), Mode=OneWay}" />
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(helper:TextBoxHelper.ButtonsAlignment)}" Value="Left">
							<Setter TargetName="ButtonColumn" Property="Width" Value="*" />
							<Setter TargetName="PART_ClearText" Property="Grid.Column" Value="0" />
							<Setter TargetName="PART_ContentHost" Property="Grid.Column" Value="1" />
							<Setter TargetName="PART_Message" Property="Grid.Column" Value="1" />
							<Setter TargetName="TextColumn" Property="Width" Value="Auto" />
						</DataTrigger>

						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
							<Setter TargetName="PART_Message" Property="Visibility" Value="Visible" />
						</DataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=(helper:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding Path=(helper:TextBoxHelper.HasText), RelativeSource={RelativeSource Self}}" Value="True" />
							</MultiDataTrigger.Conditions>
							<MultiDataTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
							</MultiDataTrigger.EnterActions>
							<MultiDataTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
							</MultiDataTrigger.ExitActions>
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(helper:TextBoxHelper.ButtonsAlignment)}" Value="Right" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(helper:TextBoxHelper.ClearTextButton)}" Value="False" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_ContentHost" Property="Grid.ColumnSpan" Value="2" />
							<Setter TargetName="PART_Message" Property="Grid.ColumnSpan" Value="2" />
						</MultiDataTrigger>

						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Base" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helper:ControlsHelper.MouseOverBorderBrush)}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="DisabledVisualElement" Property="Opacity" Value="0.6" />
						</Trigger>
						<Trigger Property="IsReadOnly" Value="True">
							<Setter TargetName="PART_ClearText" Property="IsEnabled" Value="False" />
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="Base" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helper:ControlsHelper.FocusBorderBrush)}" />
							<Setter TargetName="PART_FloatingMessage" Property="Foreground" Value="#CC119EDA" />
							<Setter TargetName="PART_FloatingMessage" Property="Opacity" Value="1" />
						</Trigger>
						<Trigger SourceName="PART_ClearText" Property="IsMouseOver" Value="True">
							<Setter TargetName="PART_ClearText" Property="Background" Value="#FFE0E0E0" />
							<Setter TargetName="PART_ClearText" Property="Foreground" Value="#CC119EDA" />
						</Trigger>
						<Trigger SourceName="PART_ClearText" Property="IsPressed" Value="True">
							<Setter TargetName="PART_ClearText" Property="Background" Value="Black" />
							<Setter TargetName="PART_ClearText" Property="Foreground" Value="White" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="helper:TextBoxHelper.HasText" Value="False" />
								<Condition Property="IsFocused" Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource enterGotFocus}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource exitGotFocus}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>

						<Trigger Property="helper:TextBoxHelper.HasText" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource enterHasText}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource exitHasText}" />
							</Trigger.ExitActions>
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsVisible" Value="True" />
								<Condition Property="helper:TextBoxHelper.IsWaitingForData" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_WaitingForDataEffectGrid" Property="Effect" Value="{StaticResource WaitingForDataEffect}" />
							<Setter TargetName="PART_WaitingForDataEffectAdornerDecorator" Property="Visibility" Value="Visible" />
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource WaitingForDataStoryboard}" />
							</MultiTrigger.EnterActions>
						</MultiTrigger>
						<Trigger Property="helper:TextBoxHelper.IsWaitingForData" Value="False">
							<Setter TargetName="PART_WaitingForDataEffectGrid" Property="Effect" Value="{x:Null}" />
							<Setter TargetName="PART_WaitingForDataEffectAdornerDecorator" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>